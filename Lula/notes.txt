Tables:

recordMaxLikes - 1 place in recordRatting max in array
recordMaxDisLikes - last place in recordRatting max in array
if(recordDislikes >= recordMaxDisLikes && recordDislikes > recordLikes*2){
    sendRecordToArchive 
}


CREATE TABLE users (
    userid SERIAL PRIMARY KEY,
    username VARCHAR(100) NOT NULL UNIQUE,
    firstName VARCHAR(100) NOT NULL,
    lastName VARCHAR(100) NOT NULL,
    email VARCHAR(200) NOT NULL UNIQUE,
    password VARCHAR(200) NOT NULL,
    created TIMESTAMP DEFAULT NOW(),
    avatarid INT DEFAULT 1,
    role VARCHAR(100) DEFAULT 'user'
);

CREATE TABLE avatars (
    avatarid SERIAL PRIMARY KEY,
    userid INT NOT NULL,
    name VARCHAR(100) NOT NULL,
    link VARCHAR(255) NOT NULL,
    FOREIGN KEY (userid) REFERENCES users (userid)
);

CREATE TABLE audios (
    recordid SERIAL PRIMARY KEY,
    userid INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    link VARCHAR(255) NOT NULL,
    created DATE DEFAULT CURRENT_DATE
    rating NUMERIC DEFAULT 0,
    likes INT DEFAULT 0,
    dislikes INT DEFAULT 0,
    FOREIGN KEY (userid) REFERENCES users (userid)
);

CREATE TABLE pending (
    recordid SERIAL PRIMARY KEY,
    userid INT NOT NULL,audio
    name VARCHAR(255) NOT NULL,
    link VARCHAR(255) NOT NULL,
    created DATE DEFAULT CURRENT_DATE
    FOREIGN KEY (userid) REFERENCES users (userid)
);

CREATE TABLE comments (
    commentid SERIAL PRIMARY KEY,
    userid INT NOT NULL,
    recordid INT NOT NULL,
    text TEXT NOT NULL,
    created DATE DEFAULT CURRENT_DATE
    updated DATE DEFAULT CURRENT_DATE
    FOREIGN KEY (userid) REFERENCES users (userid),
    FOREIGN KEY (recordId) REFERENCES audios (recordId)
);


CREATE TABLE img(
    imgid SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    link VARCHAR(255) NOT NULL,
    sectionid INT NOT NULL,
    FOREIGN KEY (sectionid) REFERENCES section (sectionid)
);

CREATE TABLE section(
    sectionid SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);


CREATE TABLE language(
    languageid SERIAL PRIMARY KEY,
    language VARCHAR(100) NOT NULL
);



CREATE TABLE rating(
    ratingid SERIAL PRIMARY KEY,
    userid INT NOT NULL,
    audioid INT NOT NULL,
    FOREIGN KEY (audioid) REFERENCES audio(audioid)

    FOREIGN KEY (userid) REFERENCES users (userid)
);


INSERT INTO img (imagename, imagelink, sectionid)
VALUES ('sample', 'https://picsum.photos/200/300', 2);

INSERT INTO img (imagename, imagelink, sectionid)
VALUES ('img1', 'https://picsum.photos/200/300', 2);

INSERT INTO section(sectionname)
VALUES ('Grammar');

INSERT INTO language(language)
VALUES ('English');

INSERT INTO users (username, firstName, lastName, email, password)
VALUES ('Dzha', 'Alla', 'Nud', 'test@mail.com', '1234');

INSERT INTO avatars (userid, imageName, imageLink)
VALUES (1, 'sky', 'https://picsum.photos/200/300');

INSERT INTO pendingaudios (userid, recordname, recordlink, duration)
VALUES (3, 'Michael Jackson We Are The World', 'https://www.computerhope.com/jargon/m/example.mp3', INTERVAL '5 minutes 30 seconds')
INSERT INTO pendingaudios (userid, recordname, recordlink, duration)
VALUES (3, 'Trinix ft Rushawn - Its a beautiful day', 'https://www.computerhope.com/jargon/m/example.mp3', INTERVAL '5 minutes 30 seconds');


INSERT INTO audios (userid, recordname, recordlink, duration, created, rating, likes, dislikes)
VALUES (1, 'Sample', 'https://example.com/audio/sample.mp3', INTERVAL '2 minutes 30 seconds', '2023-08-01', 4.5, 0, 0)

INSERT INTO comments (userid, commentText, recordId, created, updated)
VALUES (1, 'This is a great audio!', 2, '2023-08-01 12:34:56', NULL);

ALTER TABLE tickets
DROP COLUMN quantity;

ALTER TABLE tickets
ADD COLUMN quantity INTEGER NOT NULL;


8:47
ALTER TABLE users
ADD COLUMN about VARCHAR(255) DEFAULT 'I am user';

READY!:

1. users
2. audio + BY USER
3. pending - net update
4. avatar - net update
5. comment - vse krome update!!!
6. language - net update
7. img - NET BY SECTION
8. section


Example post audio
{
    "userid": 1,
    "recordname": "One more for luck",
    "recordlink": "https://example.com/audio/sample.mp3",
    "duration": "00:06:30"
}


SELECT
    audios.*,
    users.*,
    avatars.*

FROM
    audios 
JOIN
    users ON audios.userid = users.userid
LEFT JOIN
    avatars ON users.avatarid = avatars.avatarid
WHERE
    audios.imgid = 2;

select * from comments WHERE recordid = 1

ALTER TABLE users
ALTER COLUMN avatarid SET DEFAULT 1;


Comment 1:
"Audio descriptions add a whole new dimension to images, allowing those with visual impairments to vividly experience the content. It's a beautiful way to ensure inclusivity and make visual media truly accessible."

Comment 2:
"I'm always amazed by how audio descriptions enhance images. They provide intricate details that might go unnoticed, giving everyone the opportunity to appreciate the richness and depth of visual content."

Comment 3:
"Audio descriptions turn images into a captivating story for individuals who can't see them. This thoughtful addition opens up a world of imagination and understanding, making art and media more meaningful for everyone."

Comment 4:
"The magic of audio descriptions lies in their ability to paint pictures with words. By weaving together vivid descriptions, they bridge the gap between sighted and visually impaired audiences, making images a shared experience."

Comment 5:
"Audio descriptions are like a guide that leads you through the intricate tapestry of an image. It's heartwarming to know that this accessibility feature ensures that no one misses out on the beauty and context within visual content."
